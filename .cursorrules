// This is for my cursor IDE's AI to follow, it is not in gitignore so you could see how I like to code.

You are an expert in Laravel, PHP, and related web development technologies.

  Key Principles
  - Write concise, technical responses with accurate PHP examples.
  - Follow Laravel best practices and conventions.
  - Use object-oriented programming with a focus on SOLID principles.
  - Prefer iteration and modularization over duplication.
  - Use descriptive variable and method names.
  - Use lowercase with dashes for directories (e.g., app/Http/Controllers).
  - Favor dependency injection and service containers.

  PHP/Laravel
  - Use PHP 8.1+ features when appropriate (e.g., typed properties, match expressions).
  - Follow PSR-12 coding standards.
  - Use strict typing: declare(strict_types=1);
  - Utilize Laravel's built-in features and helpers when possible.
  - File structure: Follow Laravel's directory structure and naming conventions.
  - Implement proper error handling and logging:
    - Use Laravel's exception handling and logging features.
    - Create custom exceptions when necessary.
    - Use try-catch blocks for expected exceptions.
  - Use Laravel's validation features for form and request validation.
  - Implement middleware for request filtering and modification.
  - Utilize Laravel's Eloquent ORM for database interactions.
  - Use Laravel's query builder for complex database queries.
  - Implement proper database migrations and seeders.

  Dependencies
  - Laravel (latest stable version)
  - Composer for dependency management

  Laravel Best Practices
  - Use Eloquent ORM instead of raw SQL queries when possible.
  - Implement Repository pattern for data access layer.
  - Use Laravel's built-in authentication and authorization features.
  - Utilize Laravel's caching mechanisms for improved performance.
  - Implement job queues for long-running tasks.
  - Use Laravel's built-in testing tools (PHPUnit, Dusk) for unit and feature tests.
  - Implement API versioning for public APIs.
  - Use Laravel's localization features for multi-language support.
  - Implement proper CSRF protection and security measures.
  - Use Laravel Mix for asset compilation.
  - Implement proper database indexing for improved query performance.
  - Use Laravel's built-in pagination features.
  - Implement proper error logging and monitoring.

  Key Conventions
  1. Follow Laravel's MVC architecture.
  2. Use Laravel's routing system for defining application endpoints.
  3. Implement proper request validation using Form Requests.
  4. Use Laravel's Blade templating engine for views.
  5. Implement proper database relationships using Eloquent.
  6. Use Laravel's built-in authentication scaffolding.
  7. Implement proper API resource transformations.
  8. Use Laravel's event and listener system for decoupled code.
  9. Implement proper database transactions for data integrity.
  10. Use Laravel's built-in scheduling features for recurring tasks.


  Follow this emoji guide for the commit messages:
  🎨
  :art:
  Improve structure / format of the code.

  ⚡️
  :zap:
  Improve performance.

  🔥
  :fire:
  Remove code or files.

  🐛
  :bug:
  Fix a bug.

  🚑️
  :ambulance:
  Critical hotfix.

  ✨
  :sparkles:
  Introduce new features.

  📝
  :memo:
  Add or update documentation.

  🚀
  :rocket:
  Deploy stuff.

  💄
  :lipstick:
  Add or update the UI and style files.

  🎉
  :tada:
  Begin a project.

  ✅
  :white_check_mark:
  Add, update, or pass tests.

  🔒️
  :lock:
  Fix security or privacy issues.

  🔐
  :closed_lock_with_key:
  Add or update secrets.

  🔖
  :bookmark:
  Release / Version tags.

  🚨
  :rotating_light:
  Fix compiler / linter warnings.

  🚧
  :construction:
  Work in progress.

  💚
  :green_heart:
  Fix CI Build.

  ⬇️
  :arrow_down:
  Downgrade dependencies.

  ⬆️
  :arrow_up:
  Upgrade dependencies.

  📌
  :pushpin:
  Pin dependencies to specific versions.

  👷
  :construction_worker:
  Add or update CI build system.

  📈
  :chart_with_upwards_trend:
  Add or update analytics or track code.

  ♻️
  :recycle:
  Refactor code.

  ➕
  :heavy_plus_sign:
  Add a dependency.

  ➖
  :heavy_minus_sign:
  Remove a dependency.

  🔧
  :wrench:
  Add or update configuration files.

  🔨
  :hammer:
  Add or update development scripts.

  🌐
  :globe_with_meridians:
  Internationalization and localization.

  ✏️
  :pencil2:
  Fix typos.

  💩
  :poop:
  Write bad code that needs to be improved.

  ⏪️
  :rewind:
  Revert changes.

  🔀
  :twisted_rightwards_arrows:
  Merge branches.

  📦️
  :package:
  Add or update compiled files or packages.

  👽️
  :alien:
  Update code due to external API changes.

  🚚
  :truck:
  Move or rename resources (e.g.: files, paths, routes).

  📄
  :page_facing_up:
  Add or update license.

  💥
  :boom:
  Introduce breaking changes.

  🍱
  :bento:
  Add or update assets.

  ♿️
  :wheelchair:
  Improve accessibility.

  💡
  :bulb:
  Add or update comments in source code.

  🍻
  :beers:
  Write code drunkenly.

  💬
  :speech_balloon:
  Add or update text and literals.

  🗃️
  :card_file_box:
  Perform database related changes.

  🔊
  :loud_sound:
  Add or update logs.

  🔇
  :mute:
  Remove logs.

  👥
  :busts_in_silhouette:
  Add or update contributor(s).

  🚸
  :children_crossing:
  Improve user experience / usability.

  🏗️
  :building_construction:
  Make architectural changes.

  📱
  :iphone:
  Work on responsive design.

  🤡
  :clown_face:
  Mock things.

  🥚
  :egg:
  Add or update an easter egg.

  🙈
  :see_no_evil:
  Add or update a .gitignore file.

  📸
  :camera_flash:
  Add or update snapshots.

  ⚗️
  :alembic:
  Perform experiments.

  🔍️
  :mag:
  Improve SEO.

  🏷️
  :label:
  Add or update types.

  🌱
  :seedling:
  Add or update seed files.

  🚩
  :triangular_flag_on_post:
  Add, update, or remove feature flags.

  🥅
  :goal_net:
  Catch errors.

  💫
  :dizzy:
  Add or update animations and transitions.

  🗑️
  :wastebasket:
  Deprecate code that needs to be cleaned up.

  🛂
  :passport_control:
  Work on code related to authorization, roles and permissions.

  🩹
  :adhesive_bandage:
  Simple fix for a non-critical issue.

  🧐
  :monocle_face:
  Data exploration/inspection.

  ⚰️
  :coffin:
  Remove dead code.

  🧪
  :test_tube:
  Add a failing test.

  👔
  :necktie:
  Add or update business logic.

  🩺
  :stethoscope:
  Add or update healthcheck.

  🧱
  :bricks:
  Infrastructure related changes.

  🧑‍💻
  :technologist:
  Improve developer experience.

  💸
  :money_with_wings:
  Add sponsorships or money related infrastructure.

  🧵
  :thread:
  Add or update code related to multithreading or concurrency.

  🦺
  :safety_vest:
  Add or update code related to validation
